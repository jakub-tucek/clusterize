#!/bin/bash
#PBS -N oneCPUjob
#PBS -l walltime=4:00:00
#PBS -l select=1:ncpus=2:mem=6gb:scratch_local=12gb
#PBS -j oe
#PBS -m e
# Options for scheduling system - job will last 4 hours at maximum, 1 machine with 2 processor + 6gb memory RAM + 12gb scratch storage is requested
# Error output and standard output will be merged (-j oe), a notification email will be sent when the job is finished (-m e)
# You can adjust these options by your needs

module add matlab # loads desired application

DATADIR="{{storagePath}}" # sets up your input data directory


{{#variables}}
    export {{first}}={{second}}
{{/variables}}

{{#dependentVariables}}
    export {{name}}=$(({{dependentVarName}}{{modifier}}))
{{/dependentVariables}}

export MATLAB_DIR="{{taskType.matlabDir}}"

# execute Matlab command
# Parallel Computing Toolbox requires JVM !!!!!!!!
matlab -nodesktop -nosplash -nodisplay -r            \
"try,                                               "\
"    maxNumCompThreads($MATLAB_THREADS);,           "\
"    addpath('$MATLAB_DIR'),                        "\
"    {{taskType.functionName}}({{{functionParams}}}), "\
"catch e,                                           "\
"    disp(getReport(e)),                            "\
"    exit(1),                                       "\
"end,                                               "\
"exit(0)"                                            \
&> "$OUT_DIR/matlab_stdout.log"

if [ "$?" -eq 0 ]; then
# create file 'success', must be last, signals that everything went OK
echo "run number '$RUN_ID' successfully finished" > "$OUT_DIR/success"
else
echo -e "\nMatlab script completed with exit status != 0\n"
fi


echo "uloha $PBS_JOBID na `uname -n`" >result # just an example computation

cp result $DATADIR || export CLEAN_SCRATCH=false # copies result to your input data directory. The result will not be removed if the copying fails.